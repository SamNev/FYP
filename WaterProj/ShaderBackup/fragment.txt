#version 130

uniform float u_MaxHeight;
uniform float u_CullDist;
uniform vec3 u_Dir;
uniform vec3 u_Color;
uniform vec3 u_SurroundingColor[4];
uniform bool u_IgnoreHeight;
uniform sampler2D u_Sampler;

in VS_OUT {
    vec3 FragPos;
    vec2 Offset;
} fs_in;

float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * 0.1 * u_CullDist) / (u_CullDist + 0.1 - z * (u_CullDist - 0.1));	
}

void main()
{ 
    float rootTwo = 1.4142;
    vec3 col = vec3(0.0, 0.0, 0.0);
    
    vec3 topX = fs_in.Offset.x * u_SurroundingColor[0] + (1.0 - fs_in.Offset.x) * u_SurroundingColor[2];
    vec3 botX = fs_in.Offset.x * u_SurroundingColor[3] + (1.0 - fs_in.Offset.x) * u_SurroundingColor[1];
    col = fs_in.Offset.y * botX + (1.0 - fs_in.Offset.y) * topX;

    if(!u_IgnoreHeight)
    {
        col = col * (0.2 + (max(0.0, fs_in.FragPos.y)/u_MaxHeight) * 0.8);
	float depth = texture(u_Sampler, gl_FragCoord.xy/900).r;
   	float bias = min(0.0045 *(max(1.0-dot(vec3(0,1,0), u_Dir), 0.35)), 0.000009);
	depth -= bias;

	if(gl_FragCoord.z > depth)
	{
	    col.z += 1.0f;
	    col *= vec3(0.7, 0.7, 1.0);
	}
    }

    gl_FragColor = vec4(col, 1.0);
}
